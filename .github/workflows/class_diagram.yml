name: Diagrama de Clases

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Diagrama de Infraestructura"]
    types:
      - completed
    branches:
      - main
  push:
    branches:
      - main

jobs:
  generate-class-diagram:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      
      - name: Install PlantUML
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre graphviz
          wget -O plantuml.jar https://github.com/plantuml/plantuml/releases/download/v1.2023.10/plantuml-1.2023.10.jar
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Generate Backend Class Diagram
        run: |
          # Usar un enfoque alternativo con Doxygen para generar diagramas UML
          sudo apt-get install -y doxygen
          mkdir -p docs/diagrams
          
          # Crear archivo de configuración para Doxygen
          cat > Doxyfile << EOF
          OUTPUT_DIRECTORY       = docs/diagrams
          EXTRACT_ALL            = YES
          EXTRACT_PRIVATE        = NO
          EXTRACT_PACKAGE        = YES
          EXTRACT_STATIC         = YES
          RECURSIVE              = YES
          HAVE_DOT               = YES
          UML_LOOK               = YES
          CALL_GRAPH             = YES
          CALLER_GRAPH           = YES
          DOT_IMAGE_FORMAT       = png
          INPUT                  = backend
          EOF
          
          # Generar documentación y diagramas
          doxygen Doxyfile
          
          # Crear un archivo PlantUML simple para mantener compatibilidad
          echo "@startuml" > docs/diagrams/include.puml
          echo "title Backend Class Diagram" >> docs/diagrams/include.puml
          echo "package backend {" >> docs/diagrams/include.puml
          find backend -name "*.cs" | xargs grep -l "class\|interface" | while read file; do
            classname=$(basename "$file" .cs)
            echo "  class $classname" >> docs/diagrams/include.puml
          done
          echo "}" >> docs/diagrams/include.puml
          echo "@enduml" >> docs/diagrams/include.puml
          
          # Generar diagrama con PlantUML
          java -jar plantuml.jar docs/diagrams/include.puml -o docs/diagrams/backend-class-diagram
      
      - name: Generate Frontend Component Diagram
        run: |
          # Usar madge para generar un diagrama de dependencias en lugar de react-uml
          npm install -g madge
          mkdir -p docs/diagrams
          
          # Generar diagrama de dependencias en formato DOT
          madge --image docs/diagrams/frontend-component-diagram.png --extensions js,jsx frontend/src
          
          # Crear también un archivo PlantUML para mantener compatibilidad
          echo "@startuml" > docs/diagrams/frontend-component-diagram.puml
          echo "title Frontend Component Diagram" >> docs/diagrams/frontend-component-diagram.puml
          echo "package frontend {" >> docs/diagrams/frontend-component-diagram.puml
          find frontend/src -name "*.js" -o -name "*.jsx" | while read file; do
            component=$(basename "$file" | sed 's/\.[^.]*$//')
            echo "  component $component" >> docs/diagrams/frontend-component-diagram.puml
          done
          echo "}" >> docs/diagrams/frontend-component-diagram.puml
          echo "@enduml" >> docs/diagrams/frontend-component-diagram.puml
          
          # Generar diagrama con PlantUML como respaldo
          java -jar plantuml.jar docs/diagrams/frontend-component-diagram.puml
      
      - name: Commit and Push Diagrams
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Asegurar que los directorios existan
          mkdir -p docs/diagrams
          
          # Buscar y copiar los diagramas generados por Doxygen
          find docs/diagrams -name "*.png" -exec cp {} docs/diagrams/ \;
          
          # Asegurar que los archivos existan antes de agregarlos
          touch docs/diagrams/backend-class-diagram.png
          touch docs/diagrams/frontend-component-diagram.png
          
          # Obtener los últimos cambios para evitar conflictos
          git pull --rebase
          
          # Agregar todos los diagramas generados
          git add docs/diagrams/*.png
          git commit -m "Actualizar diagramas de clases [skip ci]" || echo "No changes to commit"
          
          # Intentar push con reintentos en caso de fallo
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push; then
              echo "Push exitoso"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Push fallido, reintento $RETRY_COUNT de $MAX_RETRIES"
              git pull --rebase
              sleep 5
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "No se pudo hacer push después de $MAX_RETRIES intentos"
            exit 1
          fi